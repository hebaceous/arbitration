<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.anyang.zc.arbitration.mapper.UserMapper">

	<cache/>

	<resultMap type="User" id="userResult">
		<id property="id" column="u_id" />
		<result property="name" column="u_name"/>
		<result property="username" column="u_username" />
		<result property="password" column="u_password" />
		<result property="description" column="u_description" />
		<association property="role" javaType="Role">
			<id property="id" column="r_id"/>
			<result property="name" column="r_name"/>
			<result property="description" column="r_description"/>
		</association>
	</resultMap>

	<sql id="users">u.id u_id,u.name u_name,u.username u_username,u.password u_password,u.description u_description,u.rid</sql>
	<sql id="role">r.id r_id,r.name r_name,r.description r_description</sql>

	<select id="getAll" resultMap="userResult">
		select <include refid="users"/>,<include refid="role"/>
		from users u left outer join role r on(u.rid = r.id)
	</select>

	<select id="get" parameterType="java.lang.Integer" resultMap="userResult">
		select <include refid="users"/>,<include refid="role"/>
		from users u left outer join role r on(u.rid = r.id)
		where u.id = #{id}
	</select>

	<insert id="insert" parameterType="User">
		insert into users(name,username,password,description,rid)
		values(#{name},#{username},#{password},#{description},#{role.id})
	</insert>

	<delete id="delete" parameterType="java.lang.Integer">
		delete from users where id = #{id}
	</delete>

	<update id="update" parameterType="User">
		update users
		<set>
			<if test="name != null">name = #{name},</if>
			<if test="username != null">username = #{username},</if>
			<if test="password != null">password = #{password},</if>
			<if test="description != null">description = #{description},</if>
			<if test="role.id != null">rid = #{role.id}</if>
		</set>
		where id = #{id}
	</update>

	<select id="count" parameterType="cn.anyang.zc.arbitration.model.PageModel" resultType="java.lang.Integer">
		select count(*)
		from users u left outer join role r on(u.rid = r.id)
		<if test="keyword != null">
			and (u.name like '${keyword}'
			or u.username like '${keyword}'
			or u.description like '${keyword}'
			or r.name like '${keyword}')
		</if>
	</select>

	<select id="search" parameterType="cn.anyang.zc.arbitration.model.PageModel" resultMap="userResult">
		select top ${numPerPage} <include refid="users"/>,<include refid="role"/>
		from users u left outer join role r on(u.rid = r.id)
		where u.id not in (select top ((${pageNum}-1)*${numPerPage}) id from users
			<if test="orderField != null">
				order by ${orderField} ${orderDirection}
			</if>)
		<if test="keyword != null">
			and (u.name like '${keyword}'
			or u.username like '${keyword}'
			or u.description like '${keyword}'
			or r.name like '${keyword}')
		</if>
		<if test="orderField != null">
			order by u.${orderField} ${orderDirection}
		</if>
	</select>

	<select id="login" parameterType="java.util.Map" resultMap="userResult">
		select <include refid="users"/>,<include refid="role"/>
		from users u left outer join role r on(u.rid = r.id)
		where u.username = #{username} and u.password = #{password}
	</select>

	<select id="checkUsername" parameterType="java.lang.String" resultType="User">
		select username from users where username = #{username}
	</select>

	<select id="getUsersByRID" parameterType="java.lang.Integer" resultType="User">
		select id,name from users where rid = #{rid}
	</select>

</mapper>